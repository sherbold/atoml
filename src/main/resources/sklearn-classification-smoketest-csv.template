    @parameterized.expand(params)
    @timeout(<<<TIMEOUT>>>)
    def test_<<<NAME>>>(self, name, kwargs):
        for iter in range(1,<<<ITERATIONS>>>+1):
            <<<MYSQLEVALSMOKE_START>>><<<MYSQLINDENT>>>data, meta = loadarff('smokedata/<<<NAME>>>_%i_training.arff' % iter)
            <<<MYSQLINDENT>>>testdata, testmeta = loadarff('smokedata/<<<NAME>>>_%i_test.arff' % iter)
            <<<MYSQLINDENT>>>lb_make = LabelEncoder()
            <<<MYSQLINDENT>>>data_df = pd.DataFrame(data)
            <<<MYSQLINDENT>>>data_df["classAtt"] = lb_make.fit_transform(data_df["classAtt"])
            <<<MYSQLINDENT>>>data_df = pd.get_dummies(data_df)
            <<<MYSQLINDENT>>>
            <<<MYSQLINDENT>>>testdata_df = pd.DataFrame(testdata)
            <<<MYSQLINDENT>>>testdata_df["classAtt"] = lb_make.fit_transform(testdata_df["classAtt"])
            <<<MYSQLINDENT>>>testdata_df = pd.get_dummies(testdata_df, sparse=True)
            <<<MYSQLINDENT>>>
            <<<MYSQLINDENT>>>classIndex = -1
            <<<MYSQLINDENT>>>for i, s in enumerate(data_df.columns):
            <<<MYSQLINDENT>>>    if 'classAtt' in s:
            <<<MYSQLINDENT>>>        classIndex = i
            <<<MYSQLINDENT>>>
            <<<MYSQLINDENT>>>classifier = <<<CLASSIFIER>>>
            <<<MYSQLINDENT>>>np.random.seed(42)
            <<<MYSQLINDENT>>>classifier.fit(np.delete(data_df.values, classIndex, axis=1),data_df.values[:,classIndex])
            <<<MYSQLINDENT>>>predictedLabel = classifier.predict(np.delete(testdata_df.values, classIndex, axis=1))<<<MYSQLEVALSMOKE_END>>>
            try:
                predProb = np.array(classifier.predict_proba(np.delete(testdata_df.values, classIndex, axis=1)))
                main_dir = Path(__file__).resolve().parents[2]
                predictionFile = os.path.join(main_dir, "predictions", "pred_<<<IDENTIFIER>>>_<<<NAME>>>_" + str(iter) + ".csv")
                pred_df = pd.DataFrame()
                pred_df['actual'] = testdata_df.classAtt
                pred_df['prediction'] = predictedLabel
                pred_df['prob_0'] = predProb[:,0]
                pred_df['prob_1'] = predProb[:,1]
                pred_df.to_csv(predictionFile, header=True, index=False)
                print("Predictions saved at: " + predictionFile)
            except Exception as e:
                print("Saving the predictions of <<<NAME>>> for <<<IDENTIFIER>>> failed: ", e)

