    @parameterized.expand(params)
    @timeout(<<<TIMEOUT>>>)
    def test_<<<NAME>>>_<<<DATASET>>>(self, name, kwargs):
        for iter in range(1,<<<ITERATIONS>>>+1):
            start_time = time.time_ns()
            passed = True
            exception_type = None
            exception_message = None
            exception_stacktrace = None
            testcase_name = inspect.stack()[0][3]
            
            data_original, meta_original = loadarff('morphdata/<<<DATASET>>>_%i.arff' % iter)
            data_morphed, meta_morphed = loadarff('morphdata/<<<DATASET>>>_%i_<<<NAME>>>.arff' % iter)
            lb_make = LabelEncoder()
            
            data_original_df = pd.DataFrame(data_original)
            data_original_df["classAtt"] = lb_make.fit_transform(data_original_df["classAtt"])
            data_original_df = pd.get_dummies(data_original_df)
            
            data_morph_df = pd.DataFrame(data_morphed)
            data_morph_df["classAtt"] = lb_make.fit_transform(data_morph_df["classAtt"])
            data_morph_df = pd.get_dummies(data_morph_df)
            
            class_index_original = -1
            for i, s in enumerate(data_original_df.columns):
                if 'classAtt' in s:
                    class_index_original = i
            class_index_morph = -1
            for i, s in enumerate(data_morph_df.columns):
                if 'classAtt' in s:
                    class_index_morph = i
            
            try:
                classifier_original = <<<CLASSIFIER>>>
                np.random.seed(42)
                classifier_original.fit(np.delete(data_original_df.values, class_index_original, axis=1),data_original_df.values[:,class_index_original])
                classifier_morph = <<<CLASSIFIER>>>
                np.random.seed(42)
                classifier_morph.fit(np.delete(data_morph_df.values, class_index_morph, axis=1),data_morph_df.values[:,class_index_morph])
                prediction_original = classifier_original.predict(np.delete(data_original_df.values, class_index_original, axis=1))
                prediction_morph = classifier_morph.predict(np.delete(<<<MORPHTESTDATA>>>.values, <<<MORPHCLASSINDEX>>>, axis=1))
                
                if hasattr(classifier_original, 'predict_proba'):
                    scores_original = classifier_original.predict_proba(np.delete(data_original_df.values, class_index_original, axis=1))
                    scores_morph = classifier_morph.predict_proba(np.delete(<<<MORPHTESTDATA>>>.values, <<<MORPHCLASSINDEX>>>, axis=1))
                else:
                    scores_original = np.array([prediction_original, abs(1-prediction_original)])
                    scores_morph = np.array([prediction_morph, abs(1-prediction_morph)])
                
                <<<EXPECTEDMORPHEDCLASS>>>
                
                deviations_class = sum(prediction_morph!=prediction_expected)
                deviations_score = sum(scores_morph[:,0]!=scores_expected)
                count_expected_1 = prediction_expected.sum()
                count_expected_0 = len(prediction_expected)-count_expected_1
                count_morph_1 = prediction_morph.sum()
                count_morph_0 = len(prediction_morph)-count_morph_1
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore")
                    pval_chisquare = chisquare([count_morph_0,count_morph_1], [count_expected_0, count_expected_1]).pvalue
                    pval_kstest = ks_2samp(scores_morph[:,0], scores_expected).pvalue
                
                # handles situation if all data is in one class
                if math.isnan(pval_chisquare) and deviations_class==0:
                    pval_chisquare = 1.0
            except Exception as e:
                passed = False
                exception_type = type(e).__name__
                exception_message = str(e)
                exception_stacktrace = traceback.format_exc()
                deviations_score = -1 #TODO: placeholder values to store in db if test crashes
                deviations_class = -1
                pval_chisquare = 1
                pval_kstest = 1

            exec_time = (time.time_ns() - start_time)/1000
            <<<MYSQLEVALMORPH>>>self.assert_morphtest(<<<EVALUATIONTYPE>>>, testcase_name, iter, deviations_class, deviations_score, pval_chisquare, deviations_class, no_exception, exception_type, exception_message, exception_stacktrace)

